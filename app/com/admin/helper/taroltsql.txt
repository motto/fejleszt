sql mezőbe beír:
http://webstack.hu/cikk/mysql-tarolt-eljarasok-1-resz
A feladat: néhány oladalas összefoglaló a PL/sql nyelvről. Tárolt eljárások függvények paraméter átadás tipusok összetett tipusok egy egy példa. Mivel néhány oldalon még a változó tipusokat sem lehet rendesen ismertetni és mivel amúgy sem vagyok híve az ezer leírásból ollózzunk össze egy ezeregyediket módszernek, úgy gondoltam egy gyakorlati probléma megoldását dokumentálom. Ez bár elég egyszerű de az alapokat jól bemutatja és még talán hasznnos is lehet valakinek... valahol... valamikor...

A probléma: Régóta tervezem a saját keretrendszerem  többnyelvűsítését. 


Néhány szó a plsql adattipusairól:
A plsql fő jellemzője hogy igen erősen tipusos nyelv, az összes tipus részletes ismertetése de még pontos felsorolása és meghatározása is bőven túlmutat ezen iromány keretein. Egy gyors összefoglalás:
Előre definiált egyszerű tipusok:
Ezek lényegében az alapvető sql mezőtipusok.
 Numerikus:típuscsalád:
NUMBER: NUMERIC, DECIMAL, REAL, FLOAT, INTEGER stb.
Karakteres típuscsalád:
CHAR, VARCHAR2 NCHAR, NVARCHAR2 stb
Dátum típuscsalád: DATE, TIMESTAMP, INTERVAL
Logikai típuscsalád:
BOOLEAN
Az előre definiált Összetett típusok is :  record, table, array
LOB típusok:         bfile, clob, blob, nclob
Ref típusok:           ref cursor, sys_refcursor, ref obj_típus
ezen kívül a felhaszbnálók is definiálhatnak saját tipusokat CREATE TYPE
és van %TYPE    (típus öröklés) is.
 Konverziós függvények TO_CHAR TO_DATE TO_NUMBER
a program egy deklarációs részből áll a DECLARE után valamint egy programtörzsből a BEGIN és az END között. 

de próbáljuk is ki hogy egy kicsit élőbb legyen a dolog.  Mivel a keretrendszeremhez mysql-t használok és egyenlőre nem vagyok rászorítva oracle-ra ebben fogom letesztelni. Azzal már nem akarom tovább stresszelni a hozzáértőket hogy ráadásul még php-n keresztül esetleg a phpmyadminban futtassam bár már erre is volna lehetőség. Azért sem ajánlott ez mert minden újabb réteg bevezetése újabb hibalehetőség is. Amit a tanulási tesztelési fázisban érdemes minél jobban lecsökkenteni. Tehát nyitok egy parancssort.

először is át kell állítani a sorvég jelet pl.:$$-ra mert  program több soros lesz és ha a programsoroknak is ugyanaz a végződése mint a parancssoroknak annak nem lesz jó vége.
DELIMITER $$
függvény létrehozása a CREATE PROCEDURE  parancsal történik utána kell megadni a fögvény nevét majd a paramétereit. erről később.
CREATE PROCEDURE GetData()
jön a deklarációs rész ahol egy varchar tipusú változót állítunk elő és adunk neki kezdőértéket.
DECLARE
kategoria VARCHAR2(10):='vegyes'
  BEGIN
  SELECT id FROM cikk WHERE kat=kategoria;
  END $$
DELIMITER ;

CALL GetAllArticle(); nem csinál semmit,
SHOW PROCEDURE STATUS; kilistázza tehát van hibajelet nem ad valamit csinál
	

print_r($result); így már jó PDO- használunk
ha nincs adatbázis osztály $pdo = new PDO('mysql:dbname=teszt;host=127.0.0.1', 'teszt', 'teszt');
$rs = $pdo->query('CALL GetAllArticle()');

módosításra egyenlőre nincs mód úgyhogy töröljük újat készítünk paraméterrel

DELIMITER $$
CREATE PROCEDURE Getdata(IN mezonev VARCHAR(50))
  BEGIN
  SELECT `mezonev` FROM cikk;
  END $$
DELIMITER ;

$result=DB::assoc_sor("CALL GetCC2('intro')");

Array ( [mezonev] => intro ) nem egészen erre számítottam...

nyissunk parancssort:
call getcc();
ERROR 1046 meg valami franciának tűnő szöveg persze rákereshetnék a google, pláne ha nem tudnám hogy nem választottam ki adatbázist, de úgyis idelye átállítani a mysql szervert my.ini:
# Change your locale  !
lc-messages=hu_HU újraindit ujrafuttat
ERROR 1046 nincs kivalasztott adatbazis
use adatbázisnév;
call getdata('id');
mezonev |
---------
  null  |
  null  |
  null
..
nem egészen az amire számítottam... Kis keveredés van a mezőnév változó és a mezőnév mezőnév között. Gyanú ébred bennem hogy talán mezőnevet nem is lehet változóban átadni?
egyenlőre nézzük hogy a változó átadás úgy egyébként megy-e?
CREATE PROCEDURE Getdata(IN kategoria VARCHAR(50))
BEGIN
  SELECT id,kat FROM cikk WHERE kat=kategoria;
  END
Működik, szépen kilistázza a vegyes kategóriát...
akkor mi legyen a mezőnevekkel? Igazából ehhez a feladathoz nincs rá feltétlen szükség hogy mező vagy tábla nevet adjunk át paraméterben, de valószínűtlennek tartom hogy ez az igény még nem merült fel és hogy ne született volna már rá egy egyszerű megoldás. Szóval kisstílű dolog volna megkerülni a problémát. Rövid googlizás után meg is van a megoldás.Lokális változók elsőbbséget élveznek a táblanevekkel szemben, de az oszlopnevek elsőbbséget élveznek a lokális változókkal szemben. A lekérdezés a SET és CONCAT  segítségével rakjuk össze,változókból és karakterekből,majd a prepare és az execute segítségével lefuttatjuk. a deallocated gondolom felszabadítja a memoriát. 
DELIMITER $$
CREATE PROCEDURE Getdata2(IN mezonev VARCHAR(50))
  BEGIN
    SET @s = CONCAT('SELECT ',mezonev,' FROM cikk' );
    PREPARE stmt FROM @s;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
  END $$
DELIMITER ;
  